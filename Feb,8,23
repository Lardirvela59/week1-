{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4c39b915",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 0.14188011 -0.9868893   2.94992572]\n",
      " [ 0.0434539  -0.76193604  0.7629584 ]]\n",
      "[[ 1.41880109 -9.86889302 29.49925723]\n",
      " [ 0.43453904 -7.61936045  7.62958396]]\n",
      "[[ 0.28376022 -1.9737786   5.89985145]\n",
      " [ 0.08690781 -1.52387209  1.52591679]]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np # Generate some random data\n",
    "data=np.random.randn(2,3)\n",
    "print(data)\n",
    "print(data*10)\n",
    "print(data+data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "542da8d9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[6.  7.5 8.  0.  1. ]\n"
     ]
    }
   ],
   "source": [
    "data1= [6, 7.5, 8, 0, 1]\n",
    "arr1=np.array(data1)\n",
    "print(arr1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1e59d207",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1 2 3 4]\n",
      " [5 6 7 8]]\n"
     ]
    }
   ],
   "source": [
    "data2=[[1,2,3,4],[5,6,7,8]]\n",
    "arr2=np.array(data2)\n",
    "print(arr2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ce3e1911",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1, 2, 3, 4], [5, 6, 7, 8]]\n"
     ]
    }
   ],
   "source": [
    "data2=[[1,2,3,4],[5,6,7,8]]\n",
    "print(data2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3bf85d26",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 0.28376022 -1.9737786   5.89985145]\n",
      " [ 0.08690781 -1.52387209  1.52591679]]\n"
     ]
    }
   ],
   "source": [
    "arr5=np.empty((2,3))\n",
    "print(arr5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "3df98eb4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 1 2 3 4]\n"
     ]
    }
   ],
   "source": [
    "arr6=np.arange(5)\n",
    "print(arr6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "f7e5fee3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1., 2., 3.],\n",
       "       [4., 5., 6.]])"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "arr=np.array([[1.,2.,3.], [4.,5.,6.]])\n",
    "arr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "6f191373",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 1.  4.  9.]\n",
      " [16. 25. 36.]]\n"
     ]
    }
   ],
   "source": [
    "arr2=arr*arr\n",
    "print(arr2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "cf3aae62",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[False, False, False],\n",
       "       [False, False, False]])"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr>arr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "14698e65",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1.         0.5        0.33333333]\n",
      " [0.25       0.2        0.16666667]]\n"
     ]
    }
   ],
   "source": [
    "arr2=1/arr\n",
    "print(arr2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "704a8915",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[False, False, False],\n",
       "       [False, False, False]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr2>arr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "ae5f8c1a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[False  True False]\n",
      " [ True False  True]]\n"
     ]
    }
   ],
   "source": [
    "arr2=np.array([[0., 4., 1.],[7., 2., 12.]])\n",
    "val=arr2>arr\n",
    "print(val)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "47c389e8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 1 2 3 4 5 6 7 8 9]\n"
     ]
    }
   ],
   "source": [
    "arr=np.arange(10)\n",
    "print(arr)"
   ]
  },
  {
   "cell_type": "raw",
   "id": "9387ec4c",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "48495e1c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n"
     ]
    }
   ],
   "source": [
    "print(arr[5]) #indexing \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "e6a50bdf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[5 6 7]\n",
      "[1 2 3 4 5 6 7 8]\n"
     ]
    }
   ],
   "source": [
    "arr=np.arange(10)\n",
    "print(arr[5:8]) #slicing\n",
    "print(arr[1:9])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "a57eb757",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0  1  2  3  4 12 12 12  8  9]\n"
     ]
    }
   ],
   "source": [
    "arr[5:8]=12\n",
    "print(arr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "f7c19e91",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[7 8 9]\n",
      "3\n",
      "3\n"
     ]
    }
   ],
   "source": [
    "arr2d=np.array([[1, 2, 3], [4, 5, 6,], [7, 8, 9]])\n",
    "print(arr2d[2])\n",
    "print(arr2d[0][2])\n",
    "print(arr2d[0,2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "e807dc73",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[2 3]\n",
      " [5 6]]\n",
      "[[1 2]\n",
      " [4 5]\n",
      " [7 8]]\n",
      "[[1 2 3]\n",
      " [4 5 6]\n",
      " [7 8 9]]\n"
     ]
    }
   ],
   "source": [
    "arr2d=np.array([[1, 2, 3], [4, 5, 6,], [7, 8, 9]])\n",
    "print(arr2d[:2,1:])\n",
    "print(arr2d[:,:2])\n",
    "print(arr2d[:])\n",
    "#:all\n",
    "#2: from 2 forward\n",
    "#:2 from 0 to 1 (2 exclude)\n",
    "#1:5 from 1 to 4 (5 exclude)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "f3f9ef80",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.00000000e+000 0.00000000e+000 0.00000000e+000 0.00000000e+000]\n",
      " [6.40695021e+029 5.02034658e+175 1.32737461e-075 4.04320290e-057]\n",
      " [1.84807129e-076 6.18460392e+169 5.39901866e-038 2.16385130e+190]\n",
      " [1.94918964e-153 5.30581644e+180 4.31999742e-096 2.14027814e+161]\n",
      " [1.47762371e+248 4.30625279e-096 4.82337723e+228 8.44738585e+169]\n",
      " [2.64646854e-032 1.85390578e-051 1.32759310e-075 4.26233288e-096]\n",
      " [1.16097020e-028 1.26087994e-076 3.17927165e-028 1.14217665e-071]\n",
      " [1.04917184e-153 9.08366791e+223 6.14415221e-144 4.76216209e-287]]\n",
      "[[0.00000000e+000 0.00000000e+000 0.00000000e+000 0.00000000e+000]\n",
      " [1.00000000e+000 1.00000000e+000 1.00000000e+000 1.00000000e+000]\n",
      " [1.84807129e-076 6.18460392e+169 5.39901866e-038 2.16385130e+190]\n",
      " [1.94918964e-153 5.30581644e+180 4.31999742e-096 2.14027814e+161]\n",
      " [1.47762371e+248 4.30625279e-096 4.82337723e+228 8.44738585e+169]\n",
      " [2.64646854e-032 1.85390578e-051 1.32759310e-075 4.26233288e-096]\n",
      " [1.16097020e-028 1.26087994e-076 3.17927165e-028 1.14217665e-071]\n",
      " [1.04917184e-153 9.08366791e+223 6.14415221e-144 4.76216209e-287]]\n",
      "[[0.00000000e+000 0.00000000e+000 0.00000000e+000 0.00000000e+000]\n",
      " [1.00000000e+000 1.00000000e+000 1.00000000e+000 1.00000000e+000]\n",
      " [2.00000000e+000 2.00000000e+000 2.00000000e+000 2.00000000e+000]\n",
      " [1.94918964e-153 5.30581644e+180 4.31999742e-096 2.14027814e+161]\n",
      " [1.47762371e+248 4.30625279e-096 4.82337723e+228 8.44738585e+169]\n",
      " [2.64646854e-032 1.85390578e-051 1.32759310e-075 4.26233288e-096]\n",
      " [1.16097020e-028 1.26087994e-076 3.17927165e-028 1.14217665e-071]\n",
      " [1.04917184e-153 9.08366791e+223 6.14415221e-144 4.76216209e-287]]\n",
      "[[0.00000000e+000 0.00000000e+000 0.00000000e+000 0.00000000e+000]\n",
      " [1.00000000e+000 1.00000000e+000 1.00000000e+000 1.00000000e+000]\n",
      " [2.00000000e+000 2.00000000e+000 2.00000000e+000 2.00000000e+000]\n",
      " [3.00000000e+000 3.00000000e+000 3.00000000e+000 3.00000000e+000]\n",
      " [1.47762371e+248 4.30625279e-096 4.82337723e+228 8.44738585e+169]\n",
      " [2.64646854e-032 1.85390578e-051 1.32759310e-075 4.26233288e-096]\n",
      " [1.16097020e-028 1.26087994e-076 3.17927165e-028 1.14217665e-071]\n",
      " [1.04917184e-153 9.08366791e+223 6.14415221e-144 4.76216209e-287]]\n",
      "[[0.00000000e+000 0.00000000e+000 0.00000000e+000 0.00000000e+000]\n",
      " [1.00000000e+000 1.00000000e+000 1.00000000e+000 1.00000000e+000]\n",
      " [2.00000000e+000 2.00000000e+000 2.00000000e+000 2.00000000e+000]\n",
      " [3.00000000e+000 3.00000000e+000 3.00000000e+000 3.00000000e+000]\n",
      " [4.00000000e+000 4.00000000e+000 4.00000000e+000 4.00000000e+000]\n",
      " [2.64646854e-032 1.85390578e-051 1.32759310e-075 4.26233288e-096]\n",
      " [1.16097020e-028 1.26087994e-076 3.17927165e-028 1.14217665e-071]\n",
      " [1.04917184e-153 9.08366791e+223 6.14415221e-144 4.76216209e-287]]\n",
      "[[0.00000000e+000 0.00000000e+000 0.00000000e+000 0.00000000e+000]\n",
      " [1.00000000e+000 1.00000000e+000 1.00000000e+000 1.00000000e+000]\n",
      " [2.00000000e+000 2.00000000e+000 2.00000000e+000 2.00000000e+000]\n",
      " [3.00000000e+000 3.00000000e+000 3.00000000e+000 3.00000000e+000]\n",
      " [4.00000000e+000 4.00000000e+000 4.00000000e+000 4.00000000e+000]\n",
      " [5.00000000e+000 5.00000000e+000 5.00000000e+000 5.00000000e+000]\n",
      " [1.16097020e-028 1.26087994e-076 3.17927165e-028 1.14217665e-071]\n",
      " [1.04917184e-153 9.08366791e+223 6.14415221e-144 4.76216209e-287]]\n",
      "[[0.00000000e+000 0.00000000e+000 0.00000000e+000 0.00000000e+000]\n",
      " [1.00000000e+000 1.00000000e+000 1.00000000e+000 1.00000000e+000]\n",
      " [2.00000000e+000 2.00000000e+000 2.00000000e+000 2.00000000e+000]\n",
      " [3.00000000e+000 3.00000000e+000 3.00000000e+000 3.00000000e+000]\n",
      " [4.00000000e+000 4.00000000e+000 4.00000000e+000 4.00000000e+000]\n",
      " [5.00000000e+000 5.00000000e+000 5.00000000e+000 5.00000000e+000]\n",
      " [6.00000000e+000 6.00000000e+000 6.00000000e+000 6.00000000e+000]\n",
      " [1.04917184e-153 9.08366791e+223 6.14415221e-144 4.76216209e-287]]\n",
      "[[0. 0. 0. 0.]\n",
      " [1. 1. 1. 1.]\n",
      " [2. 2. 2. 2.]\n",
      " [3. 3. 3. 3.]\n",
      " [4. 4. 4. 4.]\n",
      " [5. 5. 5. 5.]\n",
      " [6. 6. 6. 6.]\n",
      " [7. 7. 7. 7.]]\n"
     ]
    }
   ],
   "source": [
    "arr=np.empty((8,4))\n",
    "for i in range(8):\n",
    "    arr[i]=i\n",
    "    print(arr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "9caef0e6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 0  1  2  3]\n",
      " [ 4  5  6  7]\n",
      " [ 8  9 10 11]\n",
      " [12 13 14 15]\n",
      " [16 17 18 19]\n",
      " [20 21 22 23]\n",
      " [24 25 26 27]\n",
      " [28 29 30 31]]\n"
     ]
    }
   ],
   "source": [
    "arr=np.arange(32).reshape((8,4))\n",
    "print(arr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "31fc68c7",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
